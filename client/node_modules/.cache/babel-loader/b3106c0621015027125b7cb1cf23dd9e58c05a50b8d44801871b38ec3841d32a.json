{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\r-aas\\\\Documents\\\\Azure\\\\cursed-cat-central\\\\client\\\\src\\\\components\\\\ImageLoader.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './ImageLoader.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageLoader() {\n  _s();\n  const [currentImage, setCurrentImage] = useState(null);\n  const [isTransitioning, setIsTransitioning] = useState(false);\n  const incomingImageRef = useRef(null); // use ref to avoid dependency issues\n\n  // fetches and preloads the next image\n  const preloadNextImage = async () => {\n    try {\n      const response = await fetch('/local-images');\n      if (response.ok) {\n        const newImageUrl = response.url + '?' + new Date().getTime();\n        incomingImageRef.current = newImageUrl;\n      } else {\n        console.error('error loading image');\n      }\n    } catch (error) {\n      console.error('error:', error);\n    }\n  };\n\n  // handles the full transition\n  const loadRandomImage = () => {\n    setIsTransitioning(true); // start spin-out animation\n\n    // switch the image after spin-out completes\n    setTimeout(() => {\n      setCurrentImage(incomingImageRef.current); // use ref to avoid dependency issues\n      setIsTransitioning(false); // start spin-in animation\n      preloadNextImage(); // prepare the next image\n    }, 1000); // match this to the spin-out duration\n  };\n\n  // initial image load\n  useEffect(() => {\n    preloadNextImage().then(() => setCurrentImage(incomingImageRef.current));\n  }, []); // empty dependency array ensures it only runs once on mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"image-loader-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"random image loader nya~ :3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), currentImage ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: currentImage,\n      alt: \"random from cursed cat central\",\n      className: `image ${isTransitioning ? 'batman-transition' : ''}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"loading image...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: loadRandomImage,\n      className: \"button\",\n      children: \"load new image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n_s(ImageLoader, \"cqy2K4hITCVOkfCAEwyB34OJJkM=\");\n_c = ImageLoader;\nexport default ImageLoader;\nvar _c;\n$RefreshReg$(_c, \"ImageLoader\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","ImageLoader","_s","currentImage","setCurrentImage","isTransitioning","setIsTransitioning","incomingImageRef","preloadNextImage","response","fetch","ok","newImageUrl","url","Date","getTime","current","console","error","loadRandomImage","setTimeout","then","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","onClick","_c","$RefreshReg$"],"sources":["C:/Users/r-aas/Documents/Azure/cursed-cat-central/client/src/components/ImageLoader.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './ImageLoader.css';\r\n\r\nfunction ImageLoader() {\r\n    const [currentImage, setCurrentImage] = useState(null);\r\n    const [isTransitioning, setIsTransitioning] = useState(false);\r\n    const incomingImageRef = useRef(null); // use ref to avoid dependency issues\r\n\r\n    // fetches and preloads the next image\r\n    const preloadNextImage = async () => {\r\n        try {\r\n            const response = await fetch('/local-images');\r\n            if (response.ok) {\r\n                const newImageUrl = response.url + '?' + new Date().getTime();\r\n                incomingImageRef.current = newImageUrl;\r\n            } else {\r\n                console.error('error loading image');\r\n            }\r\n        } catch (error) {\r\n            console.error('error:', error);\r\n        }\r\n    };\r\n\r\n    // handles the full transition\r\n    const loadRandomImage = () => {\r\n        setIsTransitioning(true); // start spin-out animation\r\n\r\n        // switch the image after spin-out completes\r\n        setTimeout(() => {\r\n            setCurrentImage(incomingImageRef.current); // use ref to avoid dependency issues\r\n            setIsTransitioning(false); // start spin-in animation\r\n            preloadNextImage(); // prepare the next image\r\n        }, 1000); // match this to the spin-out duration\r\n    };\r\n\r\n    // initial image load\r\n    useEffect(() => {\r\n        preloadNextImage().then(() => setCurrentImage(incomingImageRef.current));\r\n    }, []); // empty dependency array ensures it only runs once on mount\r\n\r\n    return (\r\n        <div className=\"image-loader-container\">\r\n            <h1>random image loader nya~ :3</h1>\r\n            {currentImage ? (\r\n                <img\r\n                    src={currentImage}\r\n                    alt=\"random from cursed cat central\"\r\n                    className={`image ${isTransitioning ? 'batman-transition' : ''}`}\r\n                />\r\n            ) : (\r\n                <p>loading image...</p>\r\n            )}\r\n            <br />\r\n            <button onClick={loadRandomImage} className=\"button\">load new image</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImageLoader;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACS,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAMW,gBAAgB,GAAGT,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEvC;EACA,MAAMU,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,eAAe,CAAC;MAC7C,IAAID,QAAQ,CAACE,EAAE,EAAE;QACb,MAAMC,WAAW,GAAGH,QAAQ,CAACI,GAAG,GAAG,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;QAC7DR,gBAAgB,CAACS,OAAO,GAAGJ,WAAW;MAC1C,CAAC,MAAM;QACHK,OAAO,CAACC,KAAK,CAAC,qBAAqB,CAAC;MACxC;IACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;MACZD,OAAO,CAACC,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAClC;EACJ,CAAC;;EAED;EACA,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC1Bb,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC;;IAE1B;IACAc,UAAU,CAAC,MAAM;MACbhB,eAAe,CAACG,gBAAgB,CAACS,OAAO,CAAC,CAAC,CAAC;MAC3CV,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;MAC3BE,gBAAgB,CAAC,CAAC,CAAC,CAAC;IACxB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;EACd,CAAC;;EAED;EACAX,SAAS,CAAC,MAAM;IACZW,gBAAgB,CAAC,CAAC,CAACa,IAAI,CAAC,MAAMjB,eAAe,CAACG,gBAAgB,CAACS,OAAO,CAAC,CAAC;EAC5E,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACIhB,OAAA;IAAKsB,SAAS,EAAC,wBAAwB;IAAAC,QAAA,gBACnCvB,OAAA;MAAAuB,QAAA,EAAI;IAA2B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACnCxB,YAAY,gBACTH,OAAA;MACI4B,GAAG,EAAEzB,YAAa;MAClB0B,GAAG,EAAC,gCAAgC;MACpCP,SAAS,EAAE,SAASjB,eAAe,GAAG,mBAAmB,GAAG,EAAE;IAAG;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpE,CAAC,gBAEF3B,OAAA;MAAAuB,QAAA,EAAG;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACzB,eACD3B,OAAA;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACN3B,OAAA;MAAQ8B,OAAO,EAAEX,eAAgB;MAACG,SAAS,EAAC,QAAQ;MAAAC,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3E,CAAC;AAEd;AAACzB,EAAA,CArDQD,WAAW;AAAA8B,EAAA,GAAX9B,WAAW;AAuDpB,eAAeA,WAAW;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}