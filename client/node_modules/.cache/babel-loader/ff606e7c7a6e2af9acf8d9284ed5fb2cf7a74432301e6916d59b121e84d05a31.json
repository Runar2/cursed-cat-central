{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\r-aas\\\\Documents\\\\Azure\\\\cursed-cat-central\\\\client\\\\src\\\\components\\\\ImageLoader.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './ImageLoader.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageLoader() {\n  _s();\n  const [currentImage, setCurrentImage] = useState(null);\n  const [nextImage, setNextImage] = useState(null);\n  const [isTransitioning, setIsTransitioning] = useState(false);\n\n  // loadRandomImage to handle the animation and preloading\n  const loadRandomImage = async () => {\n    setIsTransitioning(true); // start the spin-shrink animation\n\n    // fetch the next image without displaying it right away\n    try {\n      const response = await fetch('/local-images');\n      if (response.ok) {\n        const newImageUrl = response.url + '?' + new Date().getTime();\n        setNextImage(newImageUrl); // preload next image\n      } else {\n        console.error('error loading image');\n      }\n    } catch (error) {\n      console.error('error:', error);\n    }\n\n    // after half the animation, switch to the new image\n    setTimeout(() => {\n      setCurrentImage(nextImage);\n      setIsTransitioning(false); // end the transition\n    }, 1000); // timing matches half the animation duration\n  };\n\n  // load an initial image when the component mounts\n  useEffect(() => {\n    loadRandomImage();\n  }, []); // empty dependency array ensures it only runs once\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"image-loader-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"random image loader nya~ :3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), currentImage ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: currentImage,\n      alt: \"random from cursed cat central\",\n      className: `image ${isTransitioning ? 'batman-transition' : ''}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"loading image...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: loadRandomImage,\n      className: \"button\",\n      children: \"load new image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n}\n_s(ImageLoader, \"UX4F8xCWMTt+b8idu/cVOlFMbto=\");\n_c = ImageLoader;\nexport default ImageLoader;\nvar _c;\n$RefreshReg$(_c, \"ImageLoader\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ImageLoader","_s","currentImage","setCurrentImage","nextImage","setNextImage","isTransitioning","setIsTransitioning","loadRandomImage","response","fetch","ok","newImageUrl","url","Date","getTime","console","error","setTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","onClick","_c","$RefreshReg$"],"sources":["C:/Users/r-aas/Documents/Azure/cursed-cat-central/client/src/components/ImageLoader.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './ImageLoader.css';\r\n\r\nfunction ImageLoader() {\r\n    const [currentImage, setCurrentImage] = useState(null);\r\n    const [nextImage, setNextImage] = useState(null);\r\n    const [isTransitioning, setIsTransitioning] = useState(false);\r\n\r\n    // loadRandomImage to handle the animation and preloading\r\n    const loadRandomImage = async () => {\r\n        setIsTransitioning(true); // start the spin-shrink animation\r\n\r\n        // fetch the next image without displaying it right away\r\n        try {\r\n            const response = await fetch('/local-images');\r\n            if (response.ok) {\r\n                const newImageUrl = response.url + '?' + new Date().getTime();\r\n                setNextImage(newImageUrl); // preload next image\r\n            } else {\r\n                console.error('error loading image');\r\n            }\r\n        } catch (error) {\r\n            console.error('error:', error);\r\n        }\r\n\r\n        // after half the animation, switch to the new image\r\n        setTimeout(() => {\r\n            setCurrentImage(nextImage);\r\n            setIsTransitioning(false); // end the transition\r\n        }, 1000); // timing matches half the animation duration\r\n    };\r\n\r\n    // load an initial image when the component mounts\r\n    useEffect(() => {\r\n        loadRandomImage();\r\n    }, []); // empty dependency array ensures it only runs once\r\n\r\n    return (\r\n        <div className=\"image-loader-container\">\r\n            <h1>random image loader nya~ :3</h1>\r\n            {currentImage ? (\r\n                <img\r\n                    src={currentImage}\r\n                    alt=\"random from cursed cat central\"\r\n                    className={`image ${isTransitioning ? 'batman-transition' : ''}`}\r\n                />\r\n            ) : (\r\n                <p>loading image...</p>\r\n            )}\r\n            <br />\r\n            <button onClick={loadRandomImage} className=\"button\">load new image</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImageLoader;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACU,eAAe,EAAEC,kBAAkB,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;;EAE7D;EACA,MAAMY,eAAe,GAAG,MAAAA,CAAA,KAAY;IAChCD,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC;;IAE1B;IACA,IAAI;MACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,eAAe,CAAC;MAC7C,IAAID,QAAQ,CAACE,EAAE,EAAE;QACb,MAAMC,WAAW,GAAGH,QAAQ,CAACI,GAAG,GAAG,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;QAC7DV,YAAY,CAACO,WAAW,CAAC,CAAC,CAAC;MAC/B,CAAC,MAAM;QACHI,OAAO,CAACC,KAAK,CAAC,qBAAqB,CAAC;MACxC;IACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;MACZD,OAAO,CAACC,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAClC;;IAEA;IACAC,UAAU,CAAC,MAAM;MACbf,eAAe,CAACC,SAAS,CAAC;MAC1BG,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;IAC/B,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;EACd,CAAC;;EAED;EACAV,SAAS,CAAC,MAAM;IACZW,eAAe,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACIT,OAAA;IAAKoB,SAAS,EAAC,wBAAwB;IAAAC,QAAA,gBACnCrB,OAAA;MAAAqB,QAAA,EAAI;IAA2B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACnCtB,YAAY,gBACTH,OAAA;MACI0B,GAAG,EAAEvB,YAAa;MAClBwB,GAAG,EAAC,gCAAgC;MACpCP,SAAS,EAAE,SAASb,eAAe,GAAG,mBAAmB,GAAG,EAAE;IAAG;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpE,CAAC,gBAEFzB,OAAA;MAAAqB,QAAA,EAAG;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACzB,eACDzB,OAAA;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACNzB,OAAA;MAAQ4B,OAAO,EAAEnB,eAAgB;MAACW,SAAS,EAAC,QAAQ;MAAAC,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3E,CAAC;AAEd;AAACvB,EAAA,CAlDQD,WAAW;AAAA4B,EAAA,GAAX5B,WAAW;AAoDpB,eAAeA,WAAW;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}